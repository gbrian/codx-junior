#!/bin/bash

# Dynamically set CODX_JUNIOR_PATH to the parent directory of the script
if [ -z "${CODX_JUNIOR_PATH}" ]; then
    export CODX_JUNIOR_PATH="$(cd "$(dirname "$0")" && pwd)"
fi

# Load .env variables
source ${CODX_JUNIOR_PATH}/.env
bash "${CODX_JUNIOR_PATH}/scripts/logo.sh"

# Logs
export LOGFILE=$CODX_SUPERVISOR_LOG_FOLDER/codx-junior.log

# Apps PIDs
API_PID=$(pgrep -f "codx.junior.main:app")
CLIENT_PID=$(pgrep -f "codx-junior/client/node_modules/.bin/vite")
OLLAMA_PID=$(pgrep -f "ollama")
NOVNC_PID=$(pgrep -f "vnc ${CODX_JUNIOR_DISPLAY}")

mkdir -p ./logs

function kill_apps() {
  echo "Stop api pid: ${API_PID}"
  kill ${API_PID} || true
  
  echo "Stop client pid: ${CLIENT_PID}"
  kill ${CLIENT_PID} || true
  
  echo "Stop ollama pid: ${OLLAMA_PID}"
  kill ${OLLAMA_PID} || true
  
  echo "Stop noVNC pid: ${NOVNC_PID}"
  kill ${NOVNC_PID} || true

}

# Function to display help information
function show_help() {
    cat << EOF
Usage: app.cli [command]

Commands:
  help      Display this help message
  install   Install the application
  run       Run the application
  stop      Stop the application
  status    Display the status of the application
  logs      Show the tail of the logs file
EOF
}

# Function to simulate installation process
function install_app() {
    echo "Starting the installation process..."
    bash "${CODX_JUNIOR_PATH}/scripts/install.sh"
    echo "Application installed successfully."
}

function stop_codx() {
  echo "Stopping codx-junior"
  kill_apps
}

function status() {
  echo "codx-junior status"

  for pid_file in ./pids/*.pid; do
    echo "Checking '$pid_file'..."
    if [ -f "$pid_file" ]; then
      pid=$(cat "$pid_file")
      if ps -p "$pid" > /dev/null 2>&1; then
        echo "Process with PID $pid ($(basename "$pid_file" .pid)) is running."
      else
        echo "Process with PID $pid ($(basename "$pid_file" .pid)) is not running."
      fi
    fi
  done
}

# Function to show the tail of the logs file
function show_log() {
  echo "Logs for $1 PID $2"
  tail -n 100 -f ./logs/$1
}
function show_logs() {
    case "$1" in
    api)
        show_log api ${API_PID}
        ;;
    client)
        show_log client ${CLIENT_PID}
        ;;
    ollama)
        show_log ollama ${OLLAMA_PID}
        ;;
    novnc)
        show_log novnc ${NOVNC_PID}
        ;;
    *)
        echo "Invalid command. Use 'logs' to see available commands."
        ;;
esac
}

# Function to simulate running the application
function start_codx() {
    stop_codx

    echo "Running the application..."
    run_codx_apps
}

function run_codx_apps() {
    run_code_server
    run_api
    run_client
    run_ollama
    run_noVNC
}

function run_code_server() {
    echo "Run code server"
    code-server --bind-addr=0.0.0.0:${CODX_JUNIOR_CODER_PORT} --auth=none >> ./logs/cod-derver 2>&1 &
}
function run_api() {
    echo "Run API"
    bash "${CODX_JUNIOR_PATH}/scripts/run_api.sh" >> ./logs/api 2>&1 &
}
function run_client() {
    echo "Run client"
    bash "${CODX_JUNIOR_PATH}/scripts/run_client.sh" >> ./logs/client 2>&1 & 
}
function run_ollama() {
    echo "Run ollama"
    bash "${CODX_JUNIOR_PATH}/scripts/run_ollama.sh" >> ./logs/ollama 2>&1 &
}
function run_noVNC() {
    echo "Run noVNC"
    bash "${CODX_JUNIOR_PATH}/scripts/run_noVNC.sh" >> ./logs/novnc 2>&1 &
}

function run_supervisor {
    /usr/bin/supervisord -c ${CODX_JUNIOR_PATH}/supervisor.conf
}

COMMAND=$1
shift
# Check the command line argument
case "$COMMAND" in
    stop)
        stop_codx
        ;;
    help)
        show_help
        ;;
    install)
        install_app
        ;;
    start)
        start_codx
        ;;
    status)
        status
        ;;
    logs)
        show_logs $@
        ;;
    supervisor)
        run_supervisor
        ;;
    *)
        echo "Invalid command. Use 'help' to see available commands."
        ;;
esac